# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio = [3, 9, 5]
sort_by = "alphabetical"
sort_sensitive = false
sort_reverse = false
sort_dir_first = true
sort_translit = false
linemode = "none"
show_hidden = false
show_symlink = true
scrolloff = 4
mouse_events = ["click", "scroll"]
title_format = "Yazi: {cwd}"

[preview]
wrap = "no"
tab_size = 2
max_width = 1000
max_height = 1000
cache_dir = ""
image_delay = 30
image_filter = "triangle"
image_quality = 75
ueberzug_scale = 1
ueberzug_offset = [0, 0, 0, 0]

[opener]
edit = [
    { run = '${EDITOR:-zed} "$@"', desc = "zed", block = true, orphan = true, for = "macos" },
    { run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "linux" },
    { run = 'code %*', orphan = true, desc = "code", for = "windows" },
    { run = 'code -w %*', block = true, desc = "code (block)", for = "windows" },
]
open = [
    { run = 'open "$@"', desc = "Open", orphan = true, for = "macos" },
    { run = 'xdg-open "$1"', desc = "Open", for = "linux" },
    { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]
reveal = [
    { run = 'open -R "$1"', desc = "Reveal(Finder)", for = "macos" },
    { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal", for = "linux" },
    { run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
    { run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
    { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "macos" },
    { run = 'ya pub extract --list "$@"', desc = "Extract here", for = "linux" },
    { run = 'tar -xf "$@ pub extract --list %*', desc = "Extract here", for = "windows" },
]
zip = [{ run = 'zip -r -X "$@".zip .', desc = "zip folder", for = "macos" }]
playVideo = [
    { run = 'iina --no-stdin "$@"', orphan = true, for = "macos" },
    { run = 'mpv --force-window "$@"', orphan = true, for = "linux" },
    { run = 'mpv --force-window %*', orphan = true, for = "windows" },
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]
playAudio = [
    { run = 'iina --no-stdin --music-mode "$@"', orphan = true, for = "macos" },
    { run = 'mpv --force-window "$@"', orphan = true, for = "linux" },
    { run = 'mpv --force-window %*', orphan = true, for = "windows" },
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

# Bulk rename in nvim
[[opener.bulk-rename]]
run = 'nvim "$@"'
block = true

[[open.prepend_rules]]
name = "bulk-rename.txt"
use = "bulk-rename"


[open]
rules = [
    # Folder
    { name = "*/", use = [
        "edit",
        "open",
        "zip",
        "reveal",
    ] },
    # Text
    { mime = "text/*", use = [
        "edit",
        "reveal",
        "open",
    ] },
    # Image
    { mime = "image/*", use = [
        "open",
        "reveal",
    ] },
    # Video
    { mime = "{video}/*", use = [
        "playVideo",
        "reveal",
    ] },
    # Audio
    { mime = "{audio}/*", use = [
        "playAudio",
        "reveal",
    ] },
    # Archive
    { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [
        "extract",
        "reveal",
    ] },
    { mime = "*/javascript", use = [
        "edit",
        "reveal",
    ] },
    # Empty file
    { mime = "inode/empty", use = [
        "edit",
        "reveal",
        "open",
    ] },
    # Fallback
    { name = "*", use = [
        "open",
        "reveal",
    ] },
]
